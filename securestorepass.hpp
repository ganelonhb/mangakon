#ifndef SECURESTOREPASS_HPP
#define SECURESTOREPASS_HPP

/* The securestorepass module will handle everything related to storing and retrieveing a password stored in a plaintext on the disk.
 * in ~/.config/mangakon/secure, there should be a file called usr.toml.
 * user.toml includes the following KVPs: user, pass, key, secret.
 * pass and secret should be encrypted in a file found in a file called ~/.config/mangakon/.shadow/secrets
 * secrets contains three values:
 * The hash for the user.toml file,
 * The key for pass,
 * and the key for secret.
 * If the file does not exist, it is generated by spawning an apikeygamestate.
 * if the file does not contain all the keys, it does the same thing with fields autopopulated.
 * if the file does not have the same hash, but all the keys exist, then a new encryption is generated for the keys and values (unless block_encrypt = true)
 * otherwise, we just initialize as usual. Everything should happen in the constructor.
 */

#include <fstream>
#include <filesystem>

#include <tomlplusplus/toml.hpp>

#include "utils.hpp"

#if defined(_WIN32) or defined(_WIN64) or defined(CYGWIN) or defined(_WINNT)
#include <windows.h>
#endif

class SecureStorePass {
public:
    explicit SecureStorePass() {
        generate();
    }

    inline bool generate() {
        // TODO: Make cross platform
        namespace fs = std::filesystem;

        fs::path base_path = fs::path(util::dirs::get_home());
        fs::path user_store = base_path;
        fs::path shadow_store = base_path;

        if constexpr(util::platform::UNIX_LIKE) {
            user_store /= fs::path(".config") / fs::path("mangakon") / fs::path("userstore");
            shadow_store /= fs::path(".config") / fs::path("mangakon") / fs::path(".shadow");

        }
        else if constexpr(util::platform::NT_LIKE) {
            user_store /= fs::path("Mangakon") / fs::path("userstore");
            shadow_store /= fs::path("Mangakon") / fs::path(".shadow");
        }

        if (!fs::exists(user_store))
            fs::create_directories(user_store);

        if (!fs::exists(shadow_store)) {
            fs::create_directories(shadow_store);

            #if defined(_WIN32) or defined(_WIN64) or defined(CYGWIN) or defined(_WINNT) // {
                SetFileAttributes(shadow_store.c_str(), FILE_ATTRIBUTE_HIDDEN);
            #endif // }
        }

        fs::path user_file = user_store / "user.toml";
        toml::table user_toml;

        try {
            user_toml = toml::parse_file(user_file.string());
        }
        catch (toml::v3::ex::parse_error &e) {
            return false;
        }

        if (user_toml.contains("user")) {
            m_user = user_toml["user"].value<std::string>().value();
        }
        else {
            return false;
        }

        if (user_toml.contains("password")) {
            m_password = user_toml["password"].value<std::string>().value();
        }
        else {
            return false;
        }

        if (user_toml.contains("apikey")) {
            m_apikey = user_toml["apikey"].value<std::string>().value();
        }
        else {
            return false;
        }

        if (user_toml.contains("secret")) {
            m_secret = user_toml["secret"].value<std::string>().value();
        }
        else {
            return false;
        }

        if (user_toml.contains("encrypt")) {
            m_encrypt = user_toml["encrypt"].value<bool>().value();
        }
        else {
            m_encrypt = true;
        }

        // Check if user file already exists. get the hash for shadow.
        if (!fs::exists(user_file)) {
            std::ofstream user(user_file);
            user.close();
            return false;
        }

        size_t hash = -1;
        std::string str_hash;
        hash = util::hash::hash_file_contents((user_file.string()));
        str_hash = std::to_string(hash);

        fs::path shadow_file = shadow_store / str_hash;

        // create the shadow file if it doesn't already exist.
        // TODO: do this after the TOML has been read.
        if (!fs::exists(shadow_file)) {
            std::ofstream shadow(shadow_file);
            shadow.close();
        }

        return true;
    }

    std::string user() const { return m_user; }
    std::string password() const { return m_password; }
    std::string apikey() const { return m_apikey; }
    std::string secret() const { return m_secret; }

    bool encrypt() const { return m_encrypt; }

    std::wstring get_json() const {
        return L""; // TODO: Fixme
    }

private:

    std::string m_user;
    std::string m_password;
    std::string m_apikey;
    std::string m_secret;

    bool m_encrypt;
};

#endif
